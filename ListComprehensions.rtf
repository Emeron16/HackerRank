{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red69\green85\blue94;\red255\green255\blue255;\red13\green16\blue23;
\red0\green0\blue255;\red255\green255\blue254;\red0\green0\blue0;\red144\green1\blue18;\red22\green107\blue41;
}
{\*\expandedcolortbl;;\cssrgb\c34118\c40784\c44314;\cssrgb\c100000\c100000\c100000;\cssrgb\c5490\c7843\c11765;
\cssrgb\c0\c0\c100000;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;\cssrgb\c63922\c8235\c8235;\cssrgb\c7451\c48627\c21176;
}
\margl1440\margr1440\vieww33400\viewh19380\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Let's learn about list comprehensions! You are given three integers\'a0\'a0and\'a0\'a0representing the dimensions of a cuboid along with an integer\'a0. Print a list of all possible coordinates given by\'a0\'a0on a 3D grid where the sum of\'a0\'a0is not equal to\'a0. Here,\'a0. Please use list comprehensions rather than multiple loops, as a learning exercise.\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b \AppleTypeServices\AppleTypeServicesF65539 \cf4 \cb3 \strokec4 Example
\f0\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \cb1 \strokec2 \uc0\u8232 \u8232 \u8232 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 All permutations of\'a0\'a0are:\cb1 \uc0\u8232 \cb3 .\cb1 \
\cb3 Print an array of the elements that do not sum to\'a0.\cb1 \
\
\pard\pardeftab720\partightenfactor0

\f1\b \AppleTypeServices\AppleTypeServicesF65539 \cf4 \cb3 \strokec4 Input Format
\f0\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Four integers\'a0\'a0and\'a0, each on a separate line.\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b \AppleTypeServices\AppleTypeServicesF65539 \cf4 \cb3 \strokec4 Constraints
\f0\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Print the list in lexicographic increasing order.\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b \AppleTypeServices\AppleTypeServicesF65539 \cf4 \cb3 \strokec4 Sample Input 0
\f0\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4 1\
1\
1\
2\
\pard\pardeftab720\partightenfactor0

\f1\b \AppleTypeServices\AppleTypeServicesF65539 \cf4 Sample Output 0
\f0\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4 [[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\
\pard\pardeftab720\partightenfactor0

\f1\b \AppleTypeServices\AppleTypeServicesF65539 \cf4 Explanation 0
\f0\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Each variable\'a0\'a0and\'a0\'a0will have values of\'a0\'a0or\'a0. All permutations of lists in the form\'a0.\cb1 \uc0\u8232 \cb3 Remove all arrays that sum to\'a0\'a0to leave only the valid permutations.\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b \AppleTypeServices\AppleTypeServicesF65539 \cf4 \cb3 \strokec4 Sample Input 1
\f0\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4 2\
2\
2\
2\
\pard\pardeftab720\partightenfactor0

\f1\b \AppleTypeServices\AppleTypeServicesF65539 \cf4 Sample Output 1
\f0\b0 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4 [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 2], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\
\
\
\
Answer:\
\pard\pardeftab720\partightenfactor0

\f2\fs30 \AppleTypeServices \cf5 \cb6 \strokec5 if\cf0 \strokec7  \cf5 \strokec5 __name__\cf0 \strokec7  == \cf8 \strokec8 '__main__'\cf0 \strokec7 :\cb1 \
\cb6     x = \cf5 \strokec5 int\cf0 \strokec7 (\cf5 \strokec5 input\cf0 \strokec7 ())\cb1 \
\cb6     y = \cf5 \strokec5 int\cf0 \strokec7 (\cf5 \strokec5 input\cf0 \strokec7 ())\cb1 \
\cb6     z = \cf5 \strokec5 int\cf0 \strokec7 (\cf5 \strokec5 input\cf0 \strokec7 ())\cb1 \
\cb6     n = \cf5 \strokec5 int\cf0 \strokec7 (\cf5 \strokec5 input\cf0 \strokec7 ())\cb1 \
\cb6     \cb1 \
\cb6     ans = [[n1,n2,n3] \cf5 \strokec5 for\cf0 \strokec7  n1 \cf5 \strokec5 in\cf0 \strokec7  \cf5 \strokec5 range\cf0 \strokec7 (x+\cf9 \strokec9 1\cf0 \strokec7 ) \cf5 \strokec5 for\cf0 \strokec7  n2 \cf5 \strokec5 in\cf0 \strokec7  \cf5 \strokec5 range\cf0 \strokec7 (y+\cf9 \strokec9 1\cf0 \strokec7 ) \cf5 \strokec5 for\cf0 \strokec7  n3 \cf5 \strokec5 in\cf0 \strokec7  \cf5 \strokec5 range\cf0 \strokec7 (z+\cf9 \strokec9 1\cf0 \strokec7 ) \cf5 \strokec5 if\cf0 \strokec7  n1 +n2 + n3 != n]\cb1 \
\cb6     \cf5 \strokec5 print\cf0 \strokec7 (ans)\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \AppleTypeServices\AppleTypeServicesF65539 \cf4 \cb3 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 \
}